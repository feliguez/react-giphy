{"version":3,"sources":["reportWebVitals.js","components/AddCategory.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGridItem.js","components/GifGrid.js","GifExpertApp.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","useFetchGifs","loading","state","setState","useEffect","imgs","setTimeout","GifGridItem","className","alt","src","GifGrid","GifExpertApp","categories","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6LAYeA,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,qBCyBCQ,EA7BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACLC,mBAAS,IADJ,mBAClCC,EADkC,KACtBC,EADsB,KAezC,OACE,sBAAMC,SATa,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,MAIhB,SACE,uBACEO,KAAK,OACLC,MAAOT,EACPU,SAjBiB,SAACP,GACtBF,EAAcE,EAAEQ,OAAOF,a,+BCPdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UACpDH,GAFmB,+DAIFI,MAAMF,GAJJ,cAIfG,EAJe,gBAKEA,EAAKC,OALP,uBAKbC,EALa,EAKbA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IACtBC,EAAsBD,EAAtBC,GAAIC,EAAkBF,EAAlBE,MAAOC,EAAWH,EAAXG,OACnB,MAAO,CACLF,KACAC,QACAV,IAAG,OAAEW,QAAF,IAAEA,OAAF,EAAEA,EAAQC,iBAAiBZ,QAXb,kBAcdM,GAdc,4CAAH,sDCuBLO,EApBM,SAACf,GAAc,IAAD,EACPd,mBAAS,CACjCqB,KAAM,GACNS,SAAS,IAHsB,mBAC1BC,EAD0B,KACnBC,EADmB,KAiBjC,OAXAC,qBAAU,WACRpB,EAAQC,GAAUtB,MAAK,SAAC0C,GACtBC,YAAW,WACTH,EAAS,CACPX,KAAMa,EACNJ,SAAS,MAEV,UAEJ,CAAChB,IAEGiB,GCXMK,EATK,SAAC,GAAoB,IAAlBV,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAC5B,OACE,0BAASqB,UAAU,yCAAnB,UACE,qBAAKC,IAAKZ,EAAOa,IAAKvB,IACtB,4BAAIU,QCmBKc,EAnBC,SAAC,GAAkB,IAAhB1B,EAAe,EAAfA,SAAe,EACEe,EAAaf,GAAjCa,EADkB,EACxBN,KAAcS,EADU,EACVA,QAEtB,OACE,qCACE,oBAAIO,UAAU,oCAAd,SAAmDvB,IAClDgB,GACG,mBAAGO,UAAU,mCAAb,wBAGJ,qBAAKA,UAAU,YAAf,SACGV,EAAOJ,KAAI,SAACC,GACX,OAAO,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aCGxBgB,EAfM,WAAO,IAAD,EACWzC,mBAAS,IADpB,mBAClB0C,EADkB,KACN3C,EADM,KAGzB,OACE,qCACE,8CACA,uBACA,cAAC,EAAD,CAAaA,cAAeA,IAC3B2C,EAAWnB,KAAI,SAACT,GAAD,OACd,cAAC,EAAD,CAASA,SAAUA,GAAeA,U,YCJ1C6B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1B1D,M","file":"static/js/main.4e2a9085.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const handleOnChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (inputValue.trim().length > 2) {\n      setCategories((cats) => [inputValue, ...cats]);\n      setInputValue('');\n    }\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        value={inputValue}\n        onChange={handleOnChange}\n      />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\nexport default AddCategory;\n","export const getGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    category\n  )}&limit=10&api_key=FItsCMBHg3Hh0YKqinoNnb3HCZWKZP3d`;\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n  const gifs = data.map((img) => {\n    const { id, title, images } = img;\n    return {\n      id,\n      title,\n      url: images?.downsized_medium.url,\n    };\n  });\n  return gifs;\n};\n","import { useEffect, useState } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nconst useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category).then((imgs) => {\n      setTimeout(() => {\n        setState({\n          data: imgs,\n          loading: false,\n        });\n      }, 750);\n    });\n  }, [category]);\n\n  return state;\n};\n\nexport default useFetchGifs;\n","const GifGridItem = ({ title, url }) => {\n  return (\n    <article className=\"card animate__animated animate__fadeIn\">\n      <img alt={title} src={url} />\n      <p>{title}</p>\n    </article>\n  );\n};\n\nexport default GifGridItem;\n","import React from 'react';\nimport useFetchGifs from '../hooks/useFetchGifs';\nimport GifGridItem from './GifGridItem';\n\nconst GifGrid = ({ category }) => {\n  const { data: images, loading } = useFetchGifs(category);\n\n  return (\n    <>\n      <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n      {loading && (\n          <p className=\"animate__animated animate__flash\">Loading...</p>\n        )\n      }\n      <div className=\"card-grid\">\n        {images.map((img) => {\n          return <GifGridItem key={img.id} {...img} />;\n        })}\n      </div>\n    </>\n  );\n};\n\nexport default GifGrid;\n","import React, { useState } from 'react';\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nconst GifExpertApp = () => {\n  const [categories, setCategories] = useState([]);\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <hr />\n      <AddCategory setCategories={setCategories} />\n      {categories.map((category) => (\n        <GifGrid category={category} key={category} />\n      ))}\n    </>\n  );\n};\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\n\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\nimport 'animate.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}